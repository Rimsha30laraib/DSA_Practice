#include <iostream>
#include <cstdlib>

using namespace std;

struct edge {
    char edge1;
    edge* next;
};

struct vertex {
    char data;
    vertex* next;
    edge* edge_list;
    bool visited;
};

struct queue {
    char value;
    struct queue* next;
};

struct queue* front = nullptr;
struct queue* rear = nullptr;

void Enqueue(char value) {
    struct queue* temp = new queue;
    temp->value = value;
    temp->next = nullptr;

    if (front == nullptr) {
        front = rear = temp;
    } else {
        rear->next = temp;
        rear = temp;
    }
}

void Dequeue() {
    if (front == nullptr) {
        cout << "Queue is empty." << endl;
        return;
    }
    struct queue* temp = front;
    front = front->next;
    delete temp;
}

bool IsEmpty() {
    return front == nullptr;
}

void breadthFirstSearch(vertex* graph) {
    Enqueue(graph->data);
    cout << "Breadth First Search: ";

    while (!IsEmpty()) {
        char current_data = front->value;
        Dequeue();

        vertex* curr = graph;  // Start from the beginning of the graph

        while (curr != nullptr) {
            if (curr->data == current_data && !curr->visited) {
                cout << curr->data << " ";
                curr->visited = true;

                edge* edge = curr->edge_list;
                while (edge != nullptr) {
                    vertex* to_vertex = graph;  // Start from the beginning of the graph
                    while (to_vertex != nullptr) {
                        if (to_vertex->data == edge->edge1 && !to_vertex->visited) {
                            Enqueue(to_vertex->data);
                            break;
                        }
                        to_vertex = to_vertex->next;
                    }
                    edge = edge->next;
                }
                break;
            }
            curr = curr->next;
        }
    }

    cout << endl;
}

void insert_vertex(vertex*& list, char value) {
    vertex* temp = new vertex;
    temp->data = value;
    temp->next = nullptr;
    temp->edge_list = nullptr;
    temp->visited = false;

    if (list == nullptr) {
        list = temp;
    } else {
        vertex* ptr = list;
        while (ptr->next != nullptr) {
            ptr = ptr->next;
        }
        ptr->next = temp;
    }
}

void insert_edge(vertex*& list, char edge_value, char vertex_value) {
    edge* temp = new edge;
    temp->edge1 = edge_value;
    temp->next = nullptr;

    vertex* current = list;
    while (current != nullptr) {
        if (vertex_value == current->data) {
            if (current->edge_list == nullptr) {
                current->edge_list = temp;
            } else {
                edge* ptr = current->edge_list;
                while (ptr->next != nullptr) {
                    ptr = ptr->next;
                }
                ptr->next = temp;
            }
            break;
        }
        current = current->next;
    }
}

void print(vertex* list) {
    vertex* current = list;
    while (current != nullptr) {
        cout << current->data << endl;
        current = current->next;
    }
}

void print_edge(vertex* list) {
    vertex* current = list;
    while (current != nullptr) {
        edge* temp = current->edge_list;
        while (temp != nullptr) {
            cout << "Vertex: " << current->data << " added to the Edge: " << temp->edge1 << endl;
            temp = temp->next;
        }
        current = current->next;
    }
}

int main() {
    vertex* list = nullptr;
    insert_vertex(list, 'a');
    insert_vertex(list, 'b');
    insert_vertex(list, 'c');
    insert_vertex(list, 'd');
    insert_vertex(list, 'e');
    print(list);

    insert_edge(list, 'b', 'a');
    insert_edge(list, 'c', 'a');
    insert_edge(list, 'd', 'b');
    insert_edge(list, 'e', 'c');
    print_edge(list);

    breadthFirstSearch(list);

    return 0;
}
