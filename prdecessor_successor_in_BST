#include<iostream>
#include<stdlib.h>
#include<queue>
using namespace std;

struct bst{
    string data;
    bst*left;
    bst*right;
};
bst* insert(bst* root, string value) {
    bst* newNode = new bst;
    newNode->data = value;
    newNode->left = nullptr;
    newNode->right = nullptr;

    if (root == nullptr) {
        root = newNode;
        return root;
    }

    bst* current = root;
    while (current != nullptr) {
        if (value < current->data) {
            if (current->left == nullptr) {
                current->left = newNode;
                return root;
            }
            current = current->left;
        } else {
            if (current->right == nullptr) {
                current->right = newNode;
                return root;
            }
            current = current->right;
        }
    }

    return root;
}
int findLevel(bst* root, string x) {
    if (root == nullptr) {
        return -1; // Element not found, or the tree is empty.
    }

    queue<pair<bst*, int>> q; // Queue to store nodes and their levels.
    q.push({root, 0}); // Initialize with the root at level 0.

    while (!q.empty()) {
        bst* current = q.front().first;
        int level = q.front().second;
        q.pop();

        if (current->data == x) {
            return level; // Element x found at this level.
        }

        if (current->left != nullptr) {
            q.push({current->left, level + 1});
        }

        if (current->right != nullptr) {
            q.push({current->right, level + 1});
        }
    }

    return -1; // Element x not found in the tree.
}
void findPredecessorsAndSuccessors(bst* root, string x) {
    if (root == nullptr) {
        cout << "Element not found or the tree is empty." << endl;
        return;
    }

    queue<bst*> q; // Queue to store nodes during traversal.
    bst* predecessor = nullptr;
    bst* successor = nullptr;
    bool found = false;

    q.push(root);

    while (!q.empty()) {
        bst* current = q.front();
        q.pop();

        if (current->data == x) {
            found = true;
            successor = current;
            break;
        } else {
            predecessor = current;
        }

        if (current->left != nullptr) {
            q.push(current->left);
        }

        if (current->right != nullptr) {
            q.push(current->right);
        }
    }

    if (!found) {
        cout << "Element not found." << endl;
        return;
    }

    if (predecessor) {
        cout << "Predecessor of " << x << " is " << predecessor->data << endl;
    } else {
        cout << x << " has no predecessor." << endl;
    }

    if (successor) {
        cout << "Successor of " << x << " is " << successor->data << endl;
    } else {
        cout << x << " has no successor." << endl;
    }
}
void mirrorImage(bst* root) {
    if (root == nullptr) {
        return;
    }

    // Swap the left and right subtrees of the current node.
    bst* temp = root->left;
    root->left = root->right;
    root->right = temp;

    // Recursively find the mirror image for the left and right subtrees.
    mirrorImage(root->left);
    mirrorImage(root->right);
}

int findHeight(bst* root, string x, int height = 0) {
    if (root == nullptr) {
        return -1; // Element not found, or the tree is empty.
    }

    if (root->data == x) {
        return height; // Element x found at this height.
    }

    int leftHeight = findHeight(root->left, x, height + 1);
    if (leftHeight != -1) {
        return leftHeight;
    }

    int rightHeight = findHeight(root->right, x, height + 1);
    return rightHeight;
}

void inorder(bst* tree) {
    if (tree != nullptr) {
        inorder(tree->left);
        cout << tree->data << endl;
        inorder(tree->right);
    }
}

int main(){
    struct bst*tree=(struct bst*)malloc(sizeof(struct bst));
    tree=nullptr;
    tree=insert(tree,"cat");
    tree=insert(tree,"dog");
    tree=insert(tree,"tiger");
    tree=insert(tree,"ant");
    tree=insert(tree,"goat");
    tree=insert(tree,"deer");
    tree=insert(tree,"hen");
    tree=insert(tree,"elephant");
    inorder(tree);
    findPredecessorsAndSuccessors(tree,"dog");
    cout<<"height is"<<" "<<findHeight(tree,"goat",0)<<endl;
    cout<<"level is"<<" "<<findLevel(tree,"dog");
    mirrorImage(tree);
    inorder(tree);

    
}
