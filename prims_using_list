#include <iostream>
#include <climits>
using namespace std;

struct edge {
    int to_vertex;
    int weight;
    edge* next;
};
struct vertex {
    int data;
    vertex* next;
    struct edge* edge_list;
};
void add_vertex(struct vertex*&graph, int value){
    vertex* temp = new vertex;
    temp->data = value;
    temp->next = nullptr;
    temp->edge_list = nullptr;
    if (graph == nullptr) {
        graph = temp;
    } else {
        vertex* ptr = graph;
        while (ptr->next != nullptr) {
            ptr = ptr->next;
        }
        ptr->next = temp;
    }
   
}
void add_edge(vertex* graph, int data, int v, int weight) {
    vertex* current = graph;
    while (current != nullptr) {
        if (current->data == data) {
            edge* elist = new edge;
            elist->to_vertex = v;
            elist->weight = weight;
            elist->next = current->edge_list;
            current->edge_list = elist;
            cout << "Edge added between vertex " << v << " and " << data << " with weight " << weight << endl;
            return;
        }
        current = current->next;
    }
    cout << "Vertex not found." << endl;
}

void print_vertex(vertex* graph) {
    vertex* t = graph;
    while (t != NULL) {
        cout << "Vertex: " << t->data << " - Edges: ";
        edge* elist = t->edge_list;
        while (elist != NULL) {
            cout << elist->to_vertex << " (Weight: " << elist->weight << ") ";
            elist = elist->next;
        }
        cout << endl;
        t = t->next;
    }
}

int min_weight(int weight[], bool visited[], int V) {
    int min = INT_MAX, minIndex = -1;
    for (int v = 0; v < V; v++) {
        if (!visited[v] && weight[v] < min) {
            min = weight[v];
            minIndex = v;
        }
    }
    return minIndex;
}

void print(int parent[], vertex* graph, int V) {
    cout << "Minimum Spanning Tree:" << endl;
    for (int i = 1; i < V; i++) {
        cout << parent[i] << " - " << graph->data << " (Weight: " << graph->edge_list->weight << ")" << endl;
        graph = graph->next;
    }
}

void prims(vertex* graph, int V) {
    int parent[V];
    int weight[V];
    bool visited[V];

    for (int i = 0; i < V; i++) {
        weight[i] = INT_MAX;
        visited[i] = false;
    }
    weight[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {
        int u = min_weight(weight, visited, V);
        visited[u] = true;

        vertex* current = graph;
        for (int i = 0; i < u; i++) {
            current = current->next;
        }

        edge* elist = current->edge_list;
        while (elist != nullptr) {
            int v = elist->to_vertex;
            if (!visited[v] && elist->weight < weight[v]) {
                parent[v] = u;
                weight[v] = elist->weight;
            }
            elist = elist->next;
        }
    }
    print(parent, graph, V);
}

int main() {
    vertex* graph = nullptr;
    add_vertex(graph, 1);
     add_vertex(graph, 2);
     add_vertex(graph, 4);

    print_vertex(graph);

    add_edge(graph, 1, 4, 2);
    add_edge(graph, 1, 2, 3);
    add_edge(graph, 2, 4, 1);

    prims(graph, 3); // The last argument should be the number of vertices (V)

    return 0;
}
